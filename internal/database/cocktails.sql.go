// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: cocktails.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addEquipmentToCocktail = `-- name: AddEquipmentToCocktail :one
insert into cocktails_equipments (cocktail_id, equipment_id)
values ($1, $2)
returning cocktail_id, equipment_id
`

type AddEquipmentToCocktailParams struct {
	CocktailID  uuid.UUID
	EquipmentID uuid.UUID
}

func (q *Queries) AddEquipmentToCocktail(ctx context.Context, arg AddEquipmentToCocktailParams) (CocktailsEquipment, error) {
	row := q.db.QueryRowContext(ctx, addEquipmentToCocktail, arg.CocktailID, arg.EquipmentID)
	var i CocktailsEquipment
	err := row.Scan(&i.CocktailID, &i.EquipmentID)
	return i, err
}

const addIngredientToCocktail = `-- name: AddIngredientToCocktail :one
insert into cocktails_ingredients (cocktail_id, ingredient_id)
values($1, $2)
returning cocktail_id, ingredient_id
`

type AddIngredientToCocktailParams struct {
	CocktailID   uuid.UUID
	IngredientID uuid.UUID
}

func (q *Queries) AddIngredientToCocktail(ctx context.Context, arg AddIngredientToCocktailParams) (CocktailsIngredient, error) {
	row := q.db.QueryRowContext(ctx, addIngredientToCocktail, arg.CocktailID, arg.IngredientID)
	var i CocktailsIngredient
	err := row.Scan(&i.CocktailID, &i.IngredientID)
	return i, err
}

const createCocktail = `-- name: CreateCocktail :one
insert into cocktails (
        id,
        name,
        instructions,
        created_at,
        updated_at
    )
values ($1, $2, $3, $4, $5)
returning id, name, instructions, created_at, updated_at
`

type CreateCocktailParams struct {
	ID           uuid.UUID
	Name         string
	Instructions []string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateCocktail(ctx context.Context, arg CreateCocktailParams) (Cocktail, error) {
	row := q.db.QueryRowContext(ctx, createCocktail,
		arg.ID,
		arg.Name,
		pq.Array(arg.Instructions),
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Cocktail
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Instructions),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCocktailById = `-- name: GetCocktailById :one
select id, name, instructions, created_at, updated_at
from cocktails
where id = $1
`

func (q *Queries) GetCocktailById(ctx context.Context, id uuid.UUID) (Cocktail, error) {
	row := q.db.QueryRowContext(ctx, getCocktailById, id)
	var i Cocktail
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Instructions),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCocktails = `-- name: GetCocktails :many
select id, name, instructions, created_at, updated_at
from cocktails
`

func (q *Queries) GetCocktails(ctx context.Context) ([]Cocktail, error) {
	rows, err := q.db.QueryContext(ctx, getCocktails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cocktail
	for rows.Next() {
		var i Cocktail
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			pq.Array(&i.Instructions),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCocktailsByEquipment = `-- name: GetCocktailsByEquipment :many
select cocktail_id
from cocktails_equipments
where equipment_id = $1
`

func (q *Queries) GetCocktailsByEquipment(ctx context.Context, equipmentID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getCocktailsByEquipment, equipmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var cocktail_id uuid.UUID
		if err := rows.Scan(&cocktail_id); err != nil {
			return nil, err
		}
		items = append(items, cocktail_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCocktailsByIngredient = `-- name: GetCocktailsByIngredient :many
select cocktail_id
from cocktails_ingredients
where ingredient_id = $1
`

func (q *Queries) GetCocktailsByIngredient(ctx context.Context, ingredientID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getCocktailsByIngredient, ingredientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var cocktail_id uuid.UUID
		if err := rows.Scan(&cocktail_id); err != nil {
			return nil, err
		}
		items = append(items, cocktail_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
