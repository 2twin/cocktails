// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: ingredients.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createIngredient = `-- name: CreateIngredient :one
insert into ingredients (id, name, created_at, updated_at)
values ($1, $2, $3, $4)
returning id, name, created_at, updated_at
`

type CreateIngredientParams struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCocktailIngredients = `-- name: GetCocktailIngredients :many
select cocktail_id, ingredient_id
from cocktails_ingredients
where cocktail_id = $1
`

func (q *Queries) GetCocktailIngredients(ctx context.Context, cocktailID uuid.UUID) ([]CocktailsIngredient, error) {
	rows, err := q.db.QueryContext(ctx, getCocktailIngredients, cocktailID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CocktailsIngredient
	for rows.Next() {
		var i CocktailsIngredient
		if err := rows.Scan(&i.CocktailID, &i.IngredientID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredientById = `-- name: GetIngredientById :one
select id, name, created_at, updated_at
from ingredients
where id = $1
`

func (q *Queries) GetIngredientById(ctx context.Context, id uuid.UUID) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredientById, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIngredients = `-- name: GetIngredients :many
select id, name, created_at, updated_at
from ingredients
`

func (q *Queries) GetIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
