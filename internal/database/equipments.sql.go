// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: equipments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEquipment = `-- name: CreateEquipment :one
insert into equipments (id, name, created_at, updated_at)
values ($1, $2, $3, $4)
returning id, name, created_at, updated_at
`

type CreateEquipmentParams struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateEquipment(ctx context.Context, arg CreateEquipmentParams) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, createEquipment,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCocktailEquipments = `-- name: GetCocktailEquipments :many
select cocktail_id, equipment_id
from cocktails_equipments
where cocktail_id = $1
`

func (q *Queries) GetCocktailEquipments(ctx context.Context, cocktailID uuid.UUID) ([]CocktailsEquipment, error) {
	rows, err := q.db.QueryContext(ctx, getCocktailEquipments, cocktailID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CocktailsEquipment
	for rows.Next() {
		var i CocktailsEquipment
		if err := rows.Scan(&i.CocktailID, &i.EquipmentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEquipmentById = `-- name: GetEquipmentById :one
select id, name, created_at, updated_at
from equipments
where id = $1
`

func (q *Queries) GetEquipmentById(ctx context.Context, id uuid.UUID) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, getEquipmentById, id)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEquipments = `-- name: GetEquipments :many
select id, name, created_at, updated_at
from equipments
`

func (q *Queries) GetEquipments(ctx context.Context) ([]Equipment, error) {
	rows, err := q.db.QueryContext(ctx, getEquipments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Equipment
	for rows.Next() {
		var i Equipment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
